<!-- Header -->
<header class="sticky top-0 bg-black bg-opacity-80 backdrop-blur-md z-10 p-4 border-b border-gray-800 shadow-sm">
    <div class="flex justify-between items-center">
        <div class="flex items-center">
            <h1 class="text-xl font-bold">Messages</h1>
            <span class="ml-2 text-xs bg-blue-500 text-white rounded-full px-2 py-0.5 hidden" id="unread-count">0</span>
        </div>
        <div class="flex items-center space-x-2">
            <button class="p-2 rounded-full hover:bg-gray-800 transition-colors duration-200" title="Settings">
                <i class="fa-solid fa-gear"></i>
            </button>
            <button class="p-2 rounded-full hover:bg-gray-800 transition-colors duration-200" title="New Message" id="header-new-message">
                <i class="fa-solid fa-pen-to-square"></i>
            </button>
        </div>
    </div>
</header>

<div class="flex h-[calc(100vh-4rem)]">
    <!-- Conversations List -->
    <div class="w-1/3 border-r border-gray-800 overflow-y-auto">
        <div class="p-4 border-b border-gray-800 sticky top-0 bg-black z-10">
            <div class="relative mb-2">
                <input type="text" id="search-direct-messages" placeholder="Search Direct Messages" class="w-full bg-gray-800 rounded-full py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200">
                <i class="fa-solid fa-search absolute left-3 top-3 text-gray-500"></i>
            </div>
            <div class="flex justify-between items-center">
                <div class="text-sm font-medium text-gray-400">Messages</div>
                <button id="filter-messages" class="text-sm text-blue-500 hover:text-blue-400 transition-colors duration-200">All messages â–¾</button>
            </div>
        </div>

        <% if (conversations && conversations.length > 0) { %>
            <% conversations.forEach(conv => { %>
                <a href="/messages/<%= conv.otherUser.username %>" class="flex items-center p-4 hover:bg-gray-900 border-b border-gray-800 transition-colors duration-200 relative <%= conv.unreadCount > 0 ? 'bg-gray-900/30' : '' %>">
                    <div class="relative">
                        <img src="<%= conv.otherUser.profileImage %>" alt="<%= conv.otherUser.name %>" class="w-12 h-12 rounded-full mr-3 object-cover border-2 <%= conv.unreadCount > 0 ? 'border-blue-500' : 'border-transparent' %>">
                        <% if (conv.otherUser.isOnline) { %>
                            <span class="absolute bottom-0 right-2 w-3 h-3 bg-green-500 rounded-full border-2 border-black"></span>
                        <% } %>
                    </div>
                    <div class="flex-1 min-w-0"> <!-- min-width prevents flex items from shrinking below content size -->
                        <div class="flex justify-between items-center">
                            <h3 class="font-bold truncate mr-2"><%= conv.otherUser.name %></h3>
                            <span class="text-gray-500 text-xs whitespace-nowrap"><%= timeAgo(conv.lastMessage.createdAt) %></span>
                        </div>
                        <div class="flex justify-between items-center mt-1">
                            <p class="text-gray-<%= conv.unreadCount > 0 ? '300' : '500' %> truncate mr-2">
                                <% if (conv.lastMessage.sender.equals(req.user._id)) { %>
                                    <span class="text-gray-500">You: </span>
                                <% } %>
                                <%= conv.lastMessage.content %>
                            </p>
                            <% if (conv.unreadCount > 0) { %>
                                <span class="bg-blue-500 text-white text-xs rounded-full min-w-5 h-5 flex items-center justify-center px-1.5">
                                    <%= conv.unreadCount %>
                                </span>
                            <% } %>
                        </div>
                    </div>
                </a>
            <% }); %>
        <% } else { %>
            <div class="flex flex-col items-center justify-center p-8 text-center h-full">
                <div class="w-20 h-20 bg-gray-800 rounded-full flex items-center justify-center mb-4 shadow-inner">
                    <i class="fa-regular fa-envelope text-3xl text-gray-400"></i>
                </div>
                <h2 class="text-xl font-bold mb-2">No messages yet</h2>
                <p class="text-gray-500 mb-6 max-w-xs">When you have messages, they will show up here. Start a conversation with someone!</p>
                <button id="new-message" class="bg-blue-500 hover:bg-blue-600 text-white rounded-full px-6 py-3 font-bold transition-colors duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5">
                    <i class="fa-solid fa-pen-to-square mr-2"></i> New Message
                </button>
            </div>
        <% } %>
    </div>

    <!-- Empty State or Selected Conversation -->
    <div class="flex-1 flex flex-col justify-center items-center bg-black bg-gradient-to-b from-gray-900/20 to-black">
        <div class="text-center max-w-md px-6">
            <div class="w-24 h-24 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center mb-6 mx-auto shadow-lg shadow-blue-500/20">
                <i class="fa-solid fa-envelope text-3xl text-white"></i>
            </div>
            <h2 class="text-2xl font-bold mb-3">Select a message</h2>
            <p class="text-gray-400 mb-8 leading-relaxed">Choose from your existing conversations or start a new one with someone from your network.</p>
            <button id="new-message-main" class="bg-blue-500 hover:bg-blue-600 text-white rounded-full px-6 py-3 font-bold transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 flex items-center mx-auto">
                <i class="fa-solid fa-pen-to-square mr-2"></i>
                New Message
            </button>
            <p class="text-gray-600 text-sm mt-6">You can also search for people to message using the search box.</p>
        </div>
    </div>
</div>

<!-- New Message Modal (Hidden by default) -->
<div id="new-message-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 hidden opacity-0 transition-opacity duration-300">
    <div class="bg-black border border-gray-800 rounded-xl w-full max-w-md mx-4 shadow-xl transform scale-95 transition-transform duration-300" id="modal-content">
        <div class="flex justify-between items-center p-4 border-b border-gray-800">
            <h3 class="text-xl font-bold">New Message</h3>
            <button id="close-modal" class="text-gray-500 hover:text-white p-2 rounded-full hover:bg-gray-800 transition-colors duration-200">
                <i class="fa-solid fa-times"></i>
            </button>
        </div>

        <div class="p-4">
            <div class="relative mb-4">
                <input type="text" id="search-users" placeholder="Search for people" class="w-full bg-gray-800 rounded-full py-3 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200">
                <i class="fa-solid fa-search absolute left-3 top-3 text-gray-500"></i>
            </div>

            <div id="search-results" class="max-h-64 overflow-y-auto rounded-xl">
                <!-- Empty state for search results -->
                <div id="search-empty-state" class="py-8 text-center">
                    <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mb-4 mx-auto">
                        <i class="fa-solid fa-user-plus text-gray-500 text-xl"></i>
                    </div>
                    <p class="text-gray-400">Search for people to message</p>
                </div>
            </div>
        </div>

        <div class="p-4 border-t border-gray-800">
            <h3 class="text-sm font-medium text-gray-400 mb-3">Suggested</h3>
            <div id="suggested-users" class="space-y-2">
                <!-- This will be populated with JavaScript -->
                <div class="animate-pulse flex items-center p-2">
                    <div class="rounded-full bg-gray-800 h-10 w-10 mr-3"></div>
                    <div class="flex-1">
                        <div class="h-4 bg-gray-800 rounded w-3/4 mb-2"></div>
                        <div class="h-3 bg-gray-800 rounded w-1/2"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // New Message Modal
    const newMessageButtons = document.querySelectorAll('#new-message, #new-message-main, #header-new-message');
    const modal = document.getElementById('new-message-modal');
    const modalContent = document.getElementById('modal-content');
    const closeModal = document.getElementById('close-modal');
    const searchInput = document.getElementById('search-users');
    const searchResults = document.getElementById('search-results');
    const searchEmptyState = document.getElementById('search-empty-state');
    const suggestedUsers = document.getElementById('suggested-users');

    // Function to open modal with animation
    function openModal() {
        modal.classList.remove('hidden');
        // Trigger reflow to ensure transition works
        void modal.offsetWidth;
        modal.classList.add('opacity-100');
        modalContent.classList.add('scale-100');
        searchInput.focus();

        // Load suggested users
        loadSuggestedUsers();
    }

    // Function to close modal with animation
    function closeModalWithAnimation() {
        modal.classList.remove('opacity-100');
        modalContent.classList.remove('scale-100');

        // Wait for animation to complete before hiding
        setTimeout(() => {
            modal.classList.add('hidden');
            searchInput.value = '';
            searchResults.innerHTML = '';
            if (searchEmptyState) {
                searchEmptyState.style.display = 'block';
            }
        }, 300);
    }

    // Open modal when clicking new message buttons
    newMessageButtons.forEach(button => {
        button.addEventListener('click', openModal);
    });

    // Close modal when clicking close button
    closeModal.addEventListener('click', closeModalWithAnimation);

    // Close modal when clicking outside
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModalWithAnimation();
        }
    });

    // Load suggested users
    async function loadSuggestedUsers() {
        if (!suggestedUsers) return;

        try {
            // This would be an API call in a real app
            // For now, we'll simulate it with a timeout
            setTimeout(() => {
                suggestedUsers.innerHTML = `
                    <a href="/messages/user1" class="flex items-center p-2 hover:bg-gray-900 rounded-lg transition-colors duration-200">
                        <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="John Doe" class="w-10 h-10 rounded-full mr-3 object-cover">
                        <div>
                            <h4 class="font-bold">John Doe</h4>
                            <p class="text-gray-500 text-sm">@johndoe</p>
                        </div>
                    </a>
                    <a href="/messages/user2" class="flex items-center p-2 hover:bg-gray-900 rounded-lg transition-colors duration-200">
                        <img src="https://randomuser.me/api/portraits/women/44.jpg" alt="Jane Smith" class="w-10 h-10 rounded-full mr-3 object-cover">
                        <div>
                            <h4 class="font-bold">Jane Smith</h4>
                            <p class="text-gray-500 text-sm">@janesmith</p>
                        </div>
                    </a>
                `;
            }, 800);
        } catch (error) {
            console.error('Error loading suggested users:', error);
            suggestedUsers.innerHTML = '<p class="text-gray-500 text-center p-4">Could not load suggestions</p>';
        }
    }

    // Search users functionality
    searchInput.addEventListener('input', debounce(async () => {
        const query = searchInput.value.trim();

        if (query.length < 2) {
            searchResults.innerHTML = '';
            if (searchEmptyState) {
                searchEmptyState.style.display = 'block';
            }
            return;
        }

        if (searchEmptyState) {
            searchEmptyState.style.display = 'none';
        }
        searchResults.innerHTML = '<div class="flex justify-center p-4"><div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500"></div></div>';

        try {
            const response = await fetch(`/api/users/search?q=${encodeURIComponent(query)}`);
            const data = await response.json();

            if (data.length === 0) {
                searchResults.innerHTML = '<p class="text-gray-500 p-4 text-center">No users found</p>';
                return;
            }

            searchResults.innerHTML = data.map(user => `
                <a href="/messages/${user.username}" class="flex items-center p-3 hover:bg-gray-900 rounded-lg transition-colors duration-200">
                    <img src="${user.profileImage}" alt="${user.name}" class="w-10 h-10 rounded-full mr-3 object-cover border border-gray-700">
                    <div>
                        <h4 class="font-bold">${user.name}</h4>
                        <p class="text-gray-500 text-sm">@${user.username}</p>
                    </div>
                </a>
            `).join('');

        } catch (error) {
            console.error('Error searching users:', error);
            searchResults.innerHTML = '<p class="text-red-500 p-4 text-center">Error searching users</p>';
        }
    }, 300));

    // Direct messages search functionality
    const directSearchInput = document.getElementById('search-direct-messages');
    if (directSearchInput) {
        directSearchInput.addEventListener('input', debounce(() => {
            const query = directSearchInput.value.trim().toLowerCase();
            const conversationsList = document.querySelectorAll('.w-1/3 > a');
            let hasResults = false;

            if (query.length < 1) {
                // Show all conversations
                conversationsList.forEach(conv => {
                    conv.style.display = 'flex';
                });
                // Remove any no results message
                const noResultsEl = document.getElementById('no-search-results');
                if (noResultsEl) noResultsEl.remove();
                return;
            }

            // Filter conversations based on name or username
            conversationsList.forEach(conv => {
                const name = conv.querySelector('.font-bold')?.textContent.toLowerCase() || '';
                const username = conv.querySelector('.text-gray-500')?.textContent.toLowerCase() || '';
                const content = conv.querySelector('.truncate')?.textContent.toLowerCase() || '';

                if (name.includes(query) || username.includes(query) || content.includes(query)) {
                    conv.style.display = 'flex';
                    hasResults = true;
                    // Add a subtle highlight effect
                    conv.classList.add('bg-blue-900/10');
                    setTimeout(() => {
                        conv.classList.remove('bg-blue-900/10');
                    }, 1000);
                } else {
                    conv.style.display = 'none';
                }
            });

            // Show no results message if needed
            const noResultsEl = document.getElementById('no-search-results');
            if (!hasResults && !noResultsEl && conversationsList.length > 0) {
                const noResults = document.createElement('div');
                noResults.id = 'no-search-results';
                noResults.className = 'p-8 text-center text-gray-500';
                noResults.innerHTML = `
                    <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mb-4 mx-auto">
                        <i class="fa-solid fa-search text-gray-600 text-xl"></i>
                    </div>
                    <p class="mb-2">No conversations matching "${query}"</p>
                    <button id="new-search-message" class="text-blue-500 hover:underline">Start a new conversation</button>
                `;
                document.querySelector('.w-1/3').appendChild(noResults);

                // Add event listener to the new conversation button
                document.getElementById('new-search-message').addEventListener('click', openModal);
            } else if (hasResults && noResultsEl) {
                noResultsEl.remove();
            }
        }, 200));
    }

    // Filter dropdown (placeholder functionality)
    const filterButton = document.getElementById('filter-messages');
    if (filterButton) {
        filterButton.addEventListener('click', function() {
            // This would show a dropdown in a real implementation
            this.textContent = this.textContent === 'All messages â–¾' ? 'Unread only â–¾' : 'All messages â–¾';
        });
    }

    // Debounce function to limit API calls
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
</script>