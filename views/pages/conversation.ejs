<!-- Header -->
<header class="sticky top-0 bg-black bg-opacity-80 backdrop-blur-md z-10 p-4 border-b border-gray-800 shadow-sm">
    <div class="flex justify-between items-center">
        <div class="flex items-center">
            <a href="/messages" class="mr-4 p-2 rounded-full hover:bg-gray-800 transition-colors duration-200 md:hidden">
                <i class="fa-solid fa-arrow-left"></i>
            </a>
            <div class="flex items-center">
                <div class="relative">
                    <img src="<%= otherUser.profileImage %>" alt="<%= otherUser.name %>" class="w-10 h-10 rounded-full mr-3 object-cover border-2 border-transparent">
                    <% if (otherUser.isOnline) { %>
                        <span class="absolute bottom-0 right-2 w-3 h-3 bg-green-500 rounded-full border-2 border-black"></span>
                    <% } %>
                </div>
                <div>
                    <div class="flex items-center">
                        <h1 class="font-bold"><%= otherUser.name %></h1>
                        <% if (otherUser.isVerified) { %>
                            <i class="fa-solid fa-circle-check text-blue-500 text-sm ml-1"></i>
                        <% } %>
                    </div>
                    <p class="text-gray-500 text-sm">@<%= otherUser.username %></p>
                </div>
            </div>
        </div>
        <div class="flex items-center space-x-2">
            <button class="p-2 rounded-full hover:bg-gray-800 transition-colors duration-200" title="Call">
                <i class="fa-solid fa-phone"></i>
            </button>
            <button class="p-2 rounded-full hover:bg-gray-800 transition-colors duration-200" title="Info">
                <i class="fa-solid fa-info-circle"></i>
            </button>
        </div>
    </div>
</header>

<div class="flex h-[calc(100vh-4rem)]">
    <!-- Conversations List (Hidden on mobile) -->
    <div class="hidden md:block md:w-1/3 border-r border-gray-800 overflow-y-auto">
        <div class="p-4 border-b border-gray-800">
            <div class="relative">
                <input type="text" placeholder="Search Direct Messages" class="w-full bg-gray-800 rounded-full py-2 pl-10 pr-4 focus:outline-none">
                <i class="fa-solid fa-search absolute left-3 top-3 text-gray-500"></i>
            </div>
        </div>

        <% if (conversations && conversations.length > 0) { %>
            <% conversations.forEach(conv => { %>
                <a href="/messages/<%= conv.otherUser.username %>" class="flex items-center p-4 hover:bg-gray-900 border-b border-gray-800 transition-colors <%= conv.otherUser.username === otherUser.username ? 'bg-gray-900' : '' %>">
                    <img src="<%= conv.otherUser.profileImage %>" alt="<%= conv.otherUser.name %>" class="w-12 h-12 rounded-full mr-3 object-cover">
                    <div class="flex-1">
                        <div class="flex justify-between">
                            <h3 class="font-bold"><%= conv.otherUser.name %></h3>
                            <span class="text-gray-500 text-sm"><%= timeAgo(conv.lastMessage.createdAt) %></span>
                        </div>
                        <div class="flex justify-between">
                            <p class="text-gray-500 truncate max-w-[150px]">
                                <% if (conv.lastMessage.sender.equals(req.user._id)) { %>
                                    <span class="text-gray-500">You: </span>
                                <% } %>
                                <%= conv.lastMessage.content %>
                            </p>
                            <% if (conv.unreadCount > 0) { %>
                                <span class="bg-blue-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                                    <%= conv.unreadCount %>
                                </span>
                            <% } %>
                        </div>
                    </div>
                </a>
            <% }); %>
        <% } else { %>
            <div class="flex flex-col items-center justify-center p-8 text-center h-64">
                <div class="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mb-4">
                    <i class="fa-solid fa-envelope text-2xl"></i>
                </div>
                <h2 class="text-2xl font-bold mb-2">No messages yet</h2>
                <p class="text-gray-500 mb-6">When you have messages, they will show up here.</p>
                <button id="new-message" class="bg-blue-500 hover:bg-blue-600 text-white rounded-full px-4 py-2 font-bold">
                    New Message
                </button>
            </div>
        <% } %>
    </div>

    <!-- Conversation -->
    <div class="flex-1 flex flex-col">
        <!-- Messages -->
        <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-gray-900/20 to-black">
            <% if (messages && messages.length > 0) { %>
                <% let lastDate = null; %>
                <% messages.forEach(message => { %>
                    <%
                    // Check if we need to show a date separator
                    const messageDate = new Date(message.createdAt).toLocaleDateString();
                    const showDateSeparator = lastDate !== messageDate;
                    lastDate = messageDate;
                    %>

                    <% if (showDateSeparator) { %>
                        <div class="flex justify-center my-4">
                            <div class="bg-gray-800 text-gray-400 text-xs px-3 py-1 rounded-full">
                                <%= new Date(message.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %>
                            </div>
                        </div>
                    <% } %>

                    <div id="message-<%= message._id %>" class="message <%= message.sender._id.equals(req.user._id) ? 'flex justify-end' : '' %>">
                        <div class="max-w-[75%]">
                            <% if (!message.sender._id.equals(req.user._id)) { %>
                                <div class="flex items-center mb-1">
                                    <img src="<%= message.sender.profileImage %>" alt="<%= message.sender.name %>" class="w-8 h-8 rounded-full mr-2 object-cover border border-gray-700">
                                    <span class="font-bold"><%= message.sender.name %></span>
                                </div>
                            <% } %>

                            <div class="<%= message.sender._id.equals(req.user._id) ? 'bg-blue-600 text-white' : 'bg-gray-800 text-white' %> rounded-2xl p-3 shadow-sm">
                                <p class="whitespace-pre-wrap break-words"><%= message.content %></p>

                                <% if (message.media && message.media.length > 0) { %>
                                    <div class="mt-2 <%= message.media.length > 1 ? 'grid grid-cols-2 gap-1' : '' %>">
                                        <% message.media.forEach(mediaUrl => { %>
                                            <img src="<%= mediaUrl %>" alt="Media" class="rounded-lg max-h-60 w-auto object-cover cursor-pointer hover:opacity-90 transition-opacity duration-200" onclick="openImageModal(this.src)">
                                        <% }); %>
                                    </div>
                                <% } %>
                            </div>

                            <div class="text-xs text-gray-500 mt-1 <%= message.sender._id.equals(req.user._id) ? 'text-right' : '' %> flex <%= message.sender._id.equals(req.user._id) ? 'justify-end' : '' %> items-center">
                                <%= new Date(message.createdAt).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' }) %>
                                <% if (message.sender._id.equals(req.user._id)) { %>
                                    <span class="ml-1 <%= message.read ? 'text-blue-500' : 'text-gray-500' %>">
                                        <i class="<%= message.read ? 'fa-solid fa-check-double' : 'fa-solid fa-check' %>"></i>
                                    </span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="flex flex-col items-center justify-center h-full text-center">
                    <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mb-4">
                        <i class="fa-regular fa-comment text-gray-500 text-2xl"></i>
                    </div>
                    <p class="text-gray-400 mb-2">No messages yet</p>
                    <p class="text-gray-500 max-w-xs">Start the conversation by sending a message below!</p>
                </div>
            <% } %>
        </div>

        <!-- Image Modal -->
        <div id="image-modal" class="fixed inset-0 bg-black/90 z-50 hidden flex items-center justify-center p-4">
            <button id="close-image-modal" class="absolute top-4 right-4 text-white p-2 rounded-full hover:bg-white/10 transition-colors duration-200">
                <i class="fa-solid fa-times text-xl"></i>
            </button>
            <img id="modal-image" src="" alt="Enlarged image" class="max-w-full max-h-[90vh] object-contain">
        </div>

        <!-- Message Input -->
        <div class="p-4 border-t border-gray-800 bg-black/50 backdrop-blur-sm">
            <form id="message-form" action="/messages/<%= otherUser.username %>" method="POST" enctype="multipart/form-data" class="flex items-end">
                <div class="flex-1 relative">
                    <textarea
                        id="message-input"
                        name="content"
                        placeholder="Type a message..."
                        class="w-full bg-gray-800 rounded-2xl py-3 pl-4 pr-12 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none min-h-[60px] max-h-32 transition-all duration-200"
                    ></textarea>

                    <div class="absolute bottom-3 right-3 flex space-x-3">
                        <label class="cursor-pointer text-blue-500 hover:text-blue-400 transition-colors duration-200">
                            <i class="fa-regular fa-image"></i>
                            <input type="file" name="media" multiple class="hidden" accept="image/*">
                        </label>
                        <button type="button" class="text-blue-500 hover:text-blue-400 transition-colors duration-200">
                            <i class="fa-regular fa-face-smile"></i>
                        </button>
                    </div>
                </div>

                <button type="submit" id="send-button" class="ml-3 bg-blue-500 hover:bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed shadow-md transition-all duration-200 transform hover:scale-105">
                    <i class="fa-solid fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    // Auto-scroll to bottom of messages
    const messagesContainer = document.getElementById('messages-container');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;

    // Auto-resize textarea and handle button state
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const imageModal = document.getElementById('image-modal');
    const modalImage = document.getElementById('modal-image');
    const closeImageModal = document.getElementById('close-image-modal');

    // Image modal functionality
    function openImageModal(src) {
        modalImage.src = src;
        imageModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
    }

    closeImageModal.addEventListener('click', function() {
        imageModal.classList.add('hidden');
        document.body.style.overflow = ''; // Re-enable scrolling
    });

    // Close modal when clicking outside the image
    imageModal.addEventListener('click', function(e) {
        if (e.target === imageModal) {
            imageModal.classList.add('hidden');
            document.body.style.overflow = '';
        }
    });

    messageInput.addEventListener('input', function() {
        // Auto-resize
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';

        // Enable/disable send button
        sendButton.disabled = this.value.trim().length === 0;

        // Emit typing indicator
        socket.emit('typing', {
            conversationId: '<%= conversationId %>',
            isTyping: this.value.length > 0,
            username: '<%= req.user.username %>'
        });
    });

    // Focus input on page load
    window.addEventListener('load', function() {
        messageInput.focus();
    });

    // Socket.io for real-time messaging
    const socket = io();

    // Join user's notification room
    socket.emit('join', '<%= req.user._id %>');

    // Join the conversation room
    socket.emit('joinConversation', '<%= conversationId %>');

    // Mark messages as read when conversation is opened
    socket.emit('markAsRead', {
        conversationId: '<%= conversationId %>',
        userId: '<%= req.user._id %>'
    });

    // Handle form submission with socket.io
    const messageForm = document.getElementById('message-form');
    messageForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Get message content
        const content = messageInput.value.trim();
        if (!content) return; // Don't send empty messages

        // Disable send button during submission
        sendButton.disabled = true;

        // Clear the input field immediately for better UX
        messageInput.value = '';
        messageInput.style.height = 'auto';

        // Stop typing indicator
        socket.emit('typing', {
            conversationId: '<%= conversationId %>',
            isTyping: false,
            username: '<%= req.user.username %>'
        });

        // Get form data for file uploads
        const formData = new FormData(this);

        try {
            // First, send the message to the server via AJAX
            const response = await fetch(this.action, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                console.error('Error sending message:', response.statusText);
                // Show error message
                const errorToast = document.createElement('div');
                errorToast.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded-lg';
                errorToast.textContent = 'Failed to send message. Please try again.';
                document.body.appendChild(errorToast);
                setTimeout(() => errorToast.remove(), 3000);
                return;
            }

            // Then, emit the socket event for real-time updates
            socket.emit('sendMessage', {
                sender: '<%= req.user._id %>',
                recipient: '<%= otherUser._id %>',
                content: content,
                media: [], // Media is handled by the server from formData
                conversationId: '<%= conversationId %>'
            });

        } catch (error) {
            console.error('Error sending message:', error);
            // Show error message
            const errorToast = document.createElement('div');
            errorToast.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded-lg';
            errorToast.textContent = 'Failed to send message. Please try again.';
            document.body.appendChild(errorToast);
            setTimeout(() => errorToast.remove(), 3000);
        } finally {
            // Re-enable the send button
            sendButton.disabled = messageInput.value.trim().length === 0;
        }
    });

    // Listen for new messages
    socket.on('newMessage', function(data) {
        const { message, user } = data;

        // Check if this message is already in the DOM (to prevent duplicates)
        if (document.getElementById(`message-${message._id}`)) {
            return;
        }

        // Create message element
        const messageDiv = document.createElement('div');
        messageDiv.id = `message-${message._id}`;
        messageDiv.className = `message ${message.sender.toString() === '<%= req.user._id.toString() %>' ? 'flex justify-end' : ''}`;

        const innerDiv = document.createElement('div');
        innerDiv.className = 'max-w-[70%]';

        // Add sender info if not the current user
        if (message.sender.toString() !== '<%= req.user._id.toString() %>') {
            const senderDiv = document.createElement('div');
            senderDiv.className = 'flex items-center mb-1';
            senderDiv.innerHTML = `
                <img src="${user.profileImage}" alt="${user.name}" class="w-8 h-8 rounded-full mr-2 object-cover">
                <span class="font-bold">${user.name}</span>
            `;
            innerDiv.appendChild(senderDiv);

            // Mark as read
            socket.emit('markAsRead', {
                conversationId: '<%= conversationId %>',
                userId: '<%= req.user._id %>'
            });
        }

        // Message content
        const contentDiv = document.createElement('div');
        contentDiv.className = `${message.sender.toString() === '<%= req.user._id.toString() %>' ? 'bg-blue-500 text-white' : 'bg-gray-800 text-white'} rounded-2xl p-3`;
        contentDiv.innerHTML = `<p>${message.content}</p>`;

        // Add media if any
        if (message.media && message.media.length > 0) {
            const mediaDiv = document.createElement('div');
            mediaDiv.className = `mt-2 ${message.media.length > 1 ? 'grid grid-cols-2 gap-1' : ''}`;

            message.media.forEach(mediaUrl => {
                const img = document.createElement('img');
                img.src = mediaUrl;
                img.alt = 'Media';
                img.className = 'rounded-lg max-h-60 w-auto';
                mediaDiv.appendChild(img);
            });

            contentDiv.appendChild(mediaDiv);
        }

        innerDiv.appendChild(contentDiv);

        // Timestamp
        const timeDiv = document.createElement('div');
        timeDiv.className = `text-xs text-gray-500 mt-1 ${message.sender.toString() === '<%= req.user._id.toString() %>' ? 'text-right' : ''}`;
        timeDiv.textContent = new Date(message.createdAt).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
        innerDiv.appendChild(timeDiv);

        messageDiv.appendChild(innerDiv);
        messagesContainer.appendChild(messageDiv);

        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    // Listen for typing indicators
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'text-gray-500 text-sm italic ml-4 mb-2 hidden';
    messagesContainer.parentNode.insertBefore(typingIndicator, messagesContainer.nextSibling);

    socket.on('userTyping', function(data) {
        if (data.isTyping) {
            typingIndicator.textContent = `${data.username} is typing...`;
            typingIndicator.classList.remove('hidden');
        } else {
            typingIndicator.classList.add('hidden');
        }
    });

    // Listen for read receipts
    socket.on('messagesRead', function(data) {
        // You could add a visual indicator that messages have been read
        console.log('Messages read by:', data.userId);
    });
</script>
